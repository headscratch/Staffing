import CCS_STF_STA:*;

class CCS_APPROVAL_SAVE
   method CCS_APPROVAL_SAVE();
   method APPROVAL_CHANGE(&nCurrentRow As number, &rDerivedApprovalRecord As Record);
   method CREATE_APPROVAL_REC(&rDerivedApprovalRecord As Record) Returns Record;
   method STORE_APPROVAL_REC(&nCurrentRow As number, &rApprovalRecord As Record);
   method SAVE_APPROVALS();
   method COMMIT_APPROVALS(&rsApprovals As Rowset, &sStaffType As string);
   method COMMIT_PRIORITY_PLACEMENT(&rowPriorityPlacement As Row, &sStaffType As string, &sApprovalStat As string);
   method COMMIT_POS_WORKLIST_ITEM(&rowApprovalItem As Row, &sStaffType As string, &sApprovalStat As string);
   method COMMIT_JOB_WORKLIST_ITEM(&rowApprovalItem As Row, &sStaffType As string, &sApprovalStat As string, &rStaffingRecord As Record);
   method COMMIT_WORKLIST_TRANSFER(&rowApprovalItem As Row, &sStaffType As string, &sApprovalStat As string, &sCurRowAction As string);
   method COMMIT_JOB_RECORD(&sPosNbr As string, &nTranNbr As number, &sEmplid As string, &sApprovalStat As string) Returns Record;
   property array of number aRowsetRecordHash;
   property array of Record aRowsetRecords;
   
end-class;


method CCS_APPROVAL_SAVE
   &aRowsetRecordHash = CreateArrayRept(0, 0);
   &aRowsetRecords = CreateArrayRept(CreateRecord(Record.CCS_STF_APRVLS), 0);
end-method;


method APPROVAL_CHANGE
   /+ &nCurrentRow as Number, +/
   /+ &rDerivedApprovalRecord as Record +/
   
   
   Local number &nRowIndex;
   Local Record &rApprRec;
   
   &rApprRec = CreateRecord(Record.CCS_STF_APRVLS);
   
   &nRowIndex = &aRowsetRecordHash.Find(&nCurrentRow);
   
   If &nRowIndex > 0 Then
      
      If &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value = "A" Then
         &aRowsetRecords [&nRowIndex].CCS_APPROVAL_STAT.Value = "A";
      End-If;
      If &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value = "R" Then
         &aRowsetRecords [&nRowIndex].CCS_APPROVAL_STAT.Value = "R";
      End-If;
      
      
      /*Check to see if either approval check box is set*/
      If &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value = "" And
            &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value = "" Then
         &aRowsetRecords [&nRowIndex].CCS_APPROVAL_STAT.Value = " ";
      End-If;
      
      If &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value <> "R" And
            &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value <> "A" Then
         &aRowsetRecords [&nRowIndex].CCS_APPROVAL_STAT.Value = " ";
      End-If;
      
   Else
      
      &rApprRec = %This.CREATE_APPROVAL_REC(&rDerivedApprovalRecord);
      %This.STORE_APPROVAL_REC(&nCurrentRow, &rApprRec);
      
   End-If;
   
end-method;

method CREATE_APPROVAL_REC
   /+ &rDerivedApprovalRecord as Record +/
   /+ Returns Record +/
   
   Local Record &rApprovalRecord;
   
   &rApprovalRecord = CreateRecord(Record.CCS_STF_APRVLS);
   
   /*Fill in the keys for CCS_STF_APPRVLS record*/
   &rApprovalRecord.CCS_SCHOOL_YR_NUM.Value = &rDerivedApprovalRecord.CCS_SCHOOL_YR_NUM.Value;
   &rApprovalRecord.LOCATION.Value = &rDerivedApprovalRecord.LOCATION.Value;
   &rApprovalRecord.CCS_STF_POS_ID.Value = &rDerivedApprovalRecord.CCS_STF_POS_ID.Value;
   &rApprovalRecord.EMPLID.Value = &rDerivedApprovalRecord.EMPLID.Value;
   &rApprovalRecord.EMPL_RCD.Value = &rDerivedApprovalRecord.EMPL_RCD.Value;
   &rApprovalRecord.EFFDT.Value = &rDerivedApprovalRecord.EFFDT.Value;
   
   /*Pull the original record from the DB*/
   If Not &rApprovalRecord.SelectByKey( False) Then
      /*If it doesn't exist in the DB then populate the record*/
      &rApprovalRecord.CCS_SCHOOL_YR_NUM.Value = &rDerivedApprovalRecord.CCS_SCHOOL_YR_NUM.Value;
      &rApprovalRecord.LOCATION.Value = &rDerivedApprovalRecord.LOCATION.Value;
      &rApprovalRecord.CCS_STF_POS_ID.Value = &rDerivedApprovalRecord.CCS_STF_POS_ID.Value;
      &rApprovalRecord.EMPLID.Value = &rDerivedApprovalRecord.EMPLID.Value;
      &rApprovalRecord.EMPL_RCD.Value = &rDerivedApprovalRecord.EMPL_RCD.Value;
      &rApprovalRecord.EFFDT.Value = &rDerivedApprovalRecord.EFFDT.Value;
      
      &rApprovalRecord.FTE.Value = &rDerivedApprovalRecord.FTE.Value;
      &rApprovalRecord.CCS_STF_ALLOC_CAT.Value = &rDerivedApprovalRecord.CCS_STF_ALLOC_CAT.Value;
      &rApprovalRecord.CCS_STF_SURPLUS_PP.Value = &rDerivedApprovalRecord.CCS_STF_SURPLUS_PP.Value;
      &rApprovalRecord.CCS_CHANGE_TYPE.Value = &rDerivedApprovalRecord.CCS_CHANGE_TYPE.Value;
      &rApprovalRecord.CCS_TRANSACT_NBR.Value = &rDerivedApprovalRecord.CCS_TRANSACT_NBR.Value;
      &rApprovalRecord.CCS_APPROVAL_STAT.Value = &rDerivedApprovalRecord.CCS_APPROVAL_STAT.Value;
      &rApprovalRecord.CCS_STA_APPROVAL.Value = &rDerivedApprovalRecord.CCS_STA_APPROVAL.Value;
   End-If;
   
   
   &rApprovalRecord.LASTUPDDTTM.Value = %Datetime;
   &rApprovalRecord.LASTUPDOPRID.Value = %OperatorId;
   
   If &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value = "A" Then
      &rApprovalRecord.CCS_APPROVAL_STAT.Value = "A";
   End-If;
   
   If &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value = "R" Then
      &rApprovalRecord.CCS_APPROVAL_STAT.Value = "R";
   End-If;
   
   /*Check to see if either approval check box is set*/
   If &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value = "" And
         &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value = "" Then
      &rApprovalRecord.CCS_APPROVAL_STAT.Value = " ";
   End-If;
   If &rDerivedApprovalRecord.CCS_APPRV_STAT_CAN.Value <> "R" And
         &rDerivedApprovalRecord.CCS_APPRV_STAT_APR.Value <> "A" Then
      &rApprovalRecord.CCS_APPROVAL_STAT.Value = " ";
   End-If;
   
   Return &rApprovalRecord;
   
end-method;

method STORE_APPROVAL_REC
   /+ &nCurrentRow as Number, +/
   /+ &rApprovalRecord as Record +/
   Local number &nRowIndex;
   
   &nRowIndex = &aRowsetRecordHash.Find(&nCurrentRow);
   If &nRowIndex = 0 Then
      &aRowsetRecordHash.Push(&nCurrentRow);
      &nRowIndex = &aRowsetRecordHash.Len;
      &aRowsetRecords [&nRowIndex] = &rApprovalRecord;
   End-If;
   
end-method;

method SAVE_APPROVALS
   Local number &nArrIndex;
   Local boolean &bSaveResult;
   Local Rowset &rsPageApprovalList;
   &rsPageApprovalList = GetLevel0()(1).GetRowset(Scroll.CCS_STF_APRVLS);
   
   For &nArrIndex = 1 To &aRowsetRecords.Len
      &bSaveResult = &aRowsetRecords [&nArrIndex].Save( True);
   End-For;
end-method;


method COMMIT_APPROVALS
   /+ &rsApprovals as Rowset, +/
   /+ &sStaffType as String +/
   
   
   
   Local Record &rStfPos;
   Local Record &rStfJob;
   
   
   Local number &nArrIndex;
   Local number &nTnum;
   
   Local string &sApprovalStat;
   Local string &sEid;
   Local string &sPnum;
   
   Local boolean &bSaveResult;
   
   For &nArrIndex = 1 To &rsApprovals.ActiveRowCount
      
      &rStfPos = CreateRecord(Record.CCS_STF_POS);
      &rStfJob = CreateRecord(Record.CCS_EE_JOB_STF);
      
      
      
      If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_APR.Value = "A" Or
            &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_CAN.Value = "R" Then
         
         If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value = "Position" Then
            /*Populate the CCS_STF_POS keys*/
            &rStfPos.CCS_SCHOOL_YR_NUM.Value = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_SCHOOL_YR_NUM.Value;
            &rStfPos.LOCATION.Value = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.LOCATION.Value;
            &rStfPos.SETID.Value = "CRCSS";
            &rStfPos.CCS_STF_POS_ID.Value = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_STF_POS_ID.Value;
            &rStfPos.EFFDT.Value = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.EFFDT.Value;
            
            /*See if a row exists*/
            If &rStfPos.SelectByKey() Then
               If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_CAN.Value = "R" Then
                  &sApprovalStat = "R";
               End-If;
               If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_APR.Value = "A" Then
                  &sApprovalStat = "A";
               End-If;
               
               /*Check that the new value for the approval stat is different 
			than what's already in the DB*/
               If &rStfPos.CCS_STA_APPROVAL.Value <> &sApprovalStat Then
                  &rStfPos.CCS_STA_APPROVAL.Value = &sApprovalStat;
                  &rStfPos.Update();
                  CommitWork();
               End-If;
               
               %This.COMMIT_POS_WORKLIST_ITEM(&rsApprovals(&nArrIndex), &sStaffType, &sApprovalStat);
               
            End-If;
         End-If;
         
         If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value = "Job" Then
            
            
            If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_CAN.Value = "R" Then
               &sApprovalStat = "R";
            End-If;
            If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_APPRV_STAT_APR.Value = "A" Then
               &sApprovalStat = "A";
            End-If;
            
            &nTnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
            &sEid = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.EMPLID.Value;
            &sPnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.POSITION_NBR.Value;
            
            
            /*Check if this is a surplus action that has been approved*/
            If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_STF_SURPLUS_PP.Value = "P" Then
               
               &rStfJob = %This.COMMIT_JOB_RECORD(&sPnum, &nTnum, &sEid, &sApprovalStat);
               If &rStfJob.EMPLID.Value <> "" Then
                  
                  %This.COMMIT_PRIORITY_PLACEMENT(&rsApprovals(&nArrIndex), &sStaffType, &sApprovalStat);
                  
               End-If;
               /*Not a priority placement just a normal change*/
            Else
               
               
               /*See if this is a transfer*/
               If &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_REQUEST_TYPE.Value = "T" Then
                  
                  /*Do the old position that they are being transferred out of first*/
                  &nTnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
                  &sEid = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.EMPLID.Value;
                  &sPnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_CUR_POS_NBR.Value;
                  
                  &rStfJob = %This.COMMIT_JOB_RECORD(&sPnum, &nTnum, &sEid, &sApprovalStat);
                  If &rStfJob.EMPLID.Value <> "" Then
                     
                     %This.COMMIT_JOB_WORKLIST_ITEM(&rsApprovals(&nArrIndex), &sStaffType, &sApprovalStat, &rStfJob);
                     
                  End-If;
                  
                  /*Do the old position that they are being transferred into next*/
                  &nTnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
                  &sEid = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.EMPLID.Value;
                  &sPnum = &rsApprovals(&nArrIndex).CCS_DERIVED_APR.CCS_NEW_POS_NBR.Value;
                  
                  &rStfJob = %This.COMMIT_JOB_RECORD(&sPnum, &nTnum, &sEid, &sApprovalStat);
                  If &rStfJob.EMPLID.Value <> "" Then
                     
                     %This.COMMIT_JOB_WORKLIST_ITEM(&rsApprovals(&nArrIndex), &sStaffType, &sApprovalStat, &rStfJob);
                     
                  End-If;
                  
               Else
                  
                  
                  &rStfJob = %This.COMMIT_JOB_RECORD(&sPnum, &nTnum, &sEid, &sApprovalStat);
                  
                  
                  If &rStfJob.EMPLID.Value <> "" Then
                     %This.COMMIT_JOB_WORKLIST_ITEM(&rsApprovals(&nArrIndex), &sStaffType, &sApprovalStat, &rStfJob);
                  End-If;
               End-If;
               
            End-If;
            
         End-If;
      End-If;
   End-For;
   
   
end-method;

method COMMIT_PRIORITY_PLACEMENT
   /+ &rowPriorityPlacement as Row, +/
   /+ &sStaffType as String, +/
   /+ &sApprovalStat as String +/
   
   Local Record &rStfPriorityPlacement;
   
   If &sStaffType = "Certificated" Then
      &rStfPriorityPlacement = CreateRecord(Record.CCS_STF_SURPLUS);
   End-If;
   
   If &sStaffType = "Support" Then
      &rStfPriorityPlacement = CreateRecord(Record.CCS_SUP_SURPLUS);
   End-If;
   /*See if this is change is approved and needs to be actioned*/
   If &sApprovalStat = "A" Then
      
      &rStfPriorityPlacement.CCS_STF_POS_ID.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_STF_POS_ID.Value;
      &rStfPriorityPlacement.EFFDT.Value = &rowPriorityPlacement.CCS_DERIVED_APR.EFFDT.Value;
      &rStfPriorityPlacement.EMPL_RCD.Value = &rowPriorityPlacement.CCS_DERIVED_APR.EMPL_RCD.Value;
      &rStfPriorityPlacement.LOCATION.Value = &rowPriorityPlacement.CCS_DERIVED_APR.LOCATION.Value;
      &rStfPriorityPlacement.EMPLID.Value = &rowPriorityPlacement.CCS_DERIVED_APR.EMPLID.Value;
      &rStfPriorityPlacement.FTE.Value = &rowPriorityPlacement.CCS_DERIVED_APR.FTE.Value;
      &rStfPriorityPlacement.CCS_SCHOOL_YR_NUM.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_SCHOOL_YR_NUM.Value;
      &rStfPriorityPlacement.CCS_CHANGE_TYPE.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value;
      &rStfPriorityPlacement.CCS_APPROVAL_STAT.Value = &sApprovalStat;
      &rStfPriorityPlacement.CCS_STA_APPROVAL.Value = &sApprovalStat;
      &rStfPriorityPlacement.CCS_COMBINED_FTE.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_COMBINED_FTE.Value;
      &rStfPriorityPlacement.CCS_STF_SURPLUS_PP.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_STF_SURPLUS_PP.Value;
      &rStfPriorityPlacement.CCS_STF_ACTION.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_STF_ACTION.Value;
      &rStfPriorityPlacement.CCS_STF_ALLOC_CAT.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_STF_ALLOC_CAT.Value;
      &rStfPriorityPlacement.CCS_TRANSACT_NBR.Value = &rowPriorityPlacement.CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
      &rStfPriorityPlacement.EMPL_CLASS.Value = &rowPriorityPlacement.CCS_DERIVED_APR.EMPL_CLASS.Value;
      
      &rStfPriorityPlacement.LASTUPDDTTM.Value = %Datetime;
      &rStfPriorityPlacement.LASTUPDOPRID.Value = %OperatorId;
      &rStfPriorityPlacement.Insert();
      CommitWork();
   End-If;
end-method;




method COMMIT_POS_WORKLIST_ITEM
   /+ &rowApprovalItem as Row, +/
   /+ &sStaffType as String, +/
   /+ &sApprovalStat as String +/
   
   Local Record &rStfWorkList;
   
   /*Does the same thing right now
  but will be changed in the future*/
   If &sStaffType = "Certificated" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   
   If &sStaffType = "Support" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   /*See if this is change is approved and needs to be actioned*/
   If &sApprovalStat = "A" Then
      &rStfWorkList.CCS_STF_POS_ID.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_STF_POS_ID.Value;
      &rStfWorkList.EFFDT.Value = &rowApprovalItem.CCS_DERIVED_APR.EFFDT.Value;
      &rStfWorkList.EMPL_RCD.Value = &rowApprovalItem.CCS_DERIVED_APR.EMPL_RCD.Value;
      &rStfWorkList.LOCATION.Value = &rowApprovalItem.CCS_DERIVED_APR.LOCATION.Value;
      &rStfWorkList.EMPLID.Value = &rowApprovalItem.CCS_DERIVED_APR.EMPLID.Value;
      &rStfWorkList.FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.FTE.Value;
      &rStfWorkList.CCS_SCHOOL_YR_NUM.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_SCHOOL_YR_NUM.Value;
      &rStfWorkList.CCS_CHANGE_TYPE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value;
      &rStfWorkList.CCS_APPROVAL_STAT.Value = &sApprovalStat;
      &rStfWorkList.CCS_STA_APPROVAL.Value = &sApprovalStat;
      &rStfWorkList.CCS_COMBINED_FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_COMBINED_FTE.Value;
      &rStfWorkList.CCS_STF_SURPLUS_PP.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_STF_SURPLUS_PP.Value;
      &rStfWorkList.CCS_STF_ACTION.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_STF_ACTION.Value;
      &rStfWorkList.CCS_STF_ALLOC_CAT.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_STF_ALLOC_CAT.Value;
      &rStfWorkList.CCS_TRANSACT_NBR.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
      &rStfWorkList.CCS_REQUEST_TYPE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_REQUEST_TYPE.Value;
      
      &rStfWorkList.LASTUPDDTTM.Value = %Datetime;
      &rStfWorkList.LASTUPDOPRID.Value = %OperatorId;
      &rStfWorkList.Insert();
      CommitWork();
   End-If;
end-method;

method COMMIT_JOB_WORKLIST_ITEM
   /+ &rowApprovalItem as Row, +/
   /+ &sStaffType as String, +/
   /+ &sApprovalStat as String, +/
   /+ &rStaffingRecord as Record +/
   
   Local Record &rStfWorkList;
   
   /*Does the same thing right now
  but will be changed in the future*/
   If &sStaffType = "Certificated" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   
   If &sStaffType = "Support" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   
   
   /*See if this is change is approved and needs to be actioned*/
   If &sApprovalStat = "A" Then
      &rStfWorkList.CCS_STF_POS_ID.Value = &rStaffingRecord.CCS_STF_POS_ID.Value;
      &rStfWorkList.EFFDT.Value = &rStaffingRecord.EFFDT.Value;
      &rStfWorkList.EMPL_RCD.Value = &rStaffingRecord.EMPL_RCD.Value;
      &rStfWorkList.LOCATION.Value = &rStaffingRecord.LOCATION.Value;
      &rStfWorkList.EMPLID.Value = &rStaffingRecord.EMPLID.Value;
      &rStfWorkList.FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.FTE.Value;
      &rStfWorkList.CCS_SCHOOL_YR_NUM.Value = &rStaffingRecord.CCS_SCHOOL_YR_NUM.Value;
      &rStfWorkList.CCS_CHANGE_TYPE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value;
      &rStfWorkList.CCS_APPROVAL_STAT.Value = &sApprovalStat;
      &rStfWorkList.CCS_STA_APPROVAL.Value = &sApprovalStat;
      &rStfWorkList.CCS_COMBINED_FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_COMBINED_FTE.Value;
      &rStfWorkList.CCS_STF_SURPLUS_PP.Value = &rStaffingRecord.CCS_STF_SURPLUS_PP.Value;
      &rStfWorkList.CCS_STF_ACTION.Value = &rStaffingRecord.CCS_STF_ACTION.Value;
      &rStfWorkList.CCS_STF_ALLOC_CAT.Value = &rStaffingRecord.CCS_STF_ALLOC_CAT.Value;
      &rStfWorkList.CCS_TRANSACT_NBR.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
      &rStfWorkList.CCS_REQUEST_TYPE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_REQUEST_TYPE.Value;
      &rStfWorkList.LASTUPDDTTM.Value = %Datetime;
      &rStfWorkList.LASTUPDOPRID.Value = %OperatorId;
      &rStfWorkList.Insert();
      CommitWork();
   End-If;
end-method;



method COMMIT_WORKLIST_TRANSFER
   /+ &rowApprovalItem as Row, +/
   /+ &sStaffType as String, +/
   /+ &sApprovalStat as String, +/
   /+ &sCurRowAction as String +/
   
   /*This function commits the removal part of the Transfer*/
   
   Local Record &rStfWorkList;
   Local Record &rTransferJob;
   
   Local number &nTransactNumber;
   Local string &sEmpId;
   Local string &sLoc;
   Local string &sStfAction;
   
   
   
   &rTransferJob = CreateRecord(Record.CCS_EE_JOB_STF);
   
   
   &nTransactNumber = &rowApprovalItem.CCS_DERIVED_APR.CCS_TRANSACT_NBR.Value;
   &sEmpId = &rowApprovalItem.CCS_DERIVED_APR.EMPLID.Value;
   &sLoc = &rowApprovalItem.CCS_DERIVED_APR.CCS_NEW_LOCATION.Value;
   
   If &sCurRowAction = "R" Then
      &sStfAction = "T";
   End-If;
   
   If &sCurRowAction = "T" Then
      &sStfAction = "R";
   End-If;
   
   SQLExec("SELECT * from PS_CCS_EE_JOB_STF WHERE CCS_STF_ACTION = :1 AND CCS_TRANSACT_NBR = :2 AND EMPLID = :3 AND LOCATION = :4 ", &sStfAction, &nTransactNumber, &sEmpId, &sLoc, &rTransferJob);
   
   If &sStaffType = "Certificated" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   
   If &sStaffType = "Support" Then
      &rStfWorkList = CreateRecord(Record.CCS_STF_WORKLST);
   End-If;
   
   
   If &rTransferJob.CCS_STF_POS_ID.Value <> "" Then
      /*No exisiting staffing job record for this change*/
      /*See if this is change is approved and needs to be actioned*/
      If &sApprovalStat = "A" Then
         
         /*Save the worklist item*/
         &rStfWorkList.CCS_STF_POS_ID.Value = &rTransferJob.CCS_STF_POS_ID.Value;
         &rStfWorkList.EFFDT.Value = &rTransferJob.EFFDT.Value;
         &rStfWorkList.EMPL_RCD.Value = &rTransferJob.EMPL_RCD.Value;
         &rStfWorkList.LOCATION.Value = &sLoc;
         &rStfWorkList.EMPLID.Value = &sEmpId;
         &rStfWorkList.FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_CUR_FTE.Value;
         &rStfWorkList.CCS_COMBINED_FTE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_COMBINED_FTE.Value;
         &rStfWorkList.CCS_SCHOOL_YR_NUM.Value = &rTransferJob.CCS_SCHOOL_YR_NUM.Value;
         &rStfWorkList.CCS_CHANGE_TYPE.Value = &rowApprovalItem.CCS_DERIVED_APR.CCS_CHANGE_TYPE.Value;
         &rStfWorkList.CCS_APPROVAL_STAT.Value = &sApprovalStat;
         &rStfWorkList.CCS_STA_APPROVAL.Value = &sApprovalStat;
         &rStfWorkList.CCS_STF_ACTION.Value = &rTransferJob.CCS_STF_ACTION.Value;
         &rStfWorkList.CCS_STF_ALLOC_CAT.Value = &rTransferJob.CCS_STF_ALLOC_CAT.Value;
         &rStfWorkList.CCS_TRANSACT_NBR.Value = &nTransactNumber;
         &rStfWorkList.CCS_REQUEST_TYPE.Value = &rTransferJob.CCS_REQUEST_TYPE.Value;
         &rStfWorkList.LASTUPDDTTM.Value = %Datetime;
         &rStfWorkList.LASTUPDOPRID.Value = %OperatorId;
         &rStfWorkList.Insert();
         CommitWork();
         
      End-If;
      
      
   End-If;
   
   
   
   
end-method;


method COMMIT_JOB_RECORD
   /+ &sPosNbr as String, +/
   /+ &nTranNbr as Number, +/
   /+ &sEmplid as String, +/
   /+ &sApprovalStat as String +/
   /+ Returns Record +/
   
   
   Local Record &rStfJob;
   
   Local boolean &bRecSaved;
   
   &bRecSaved = False;
   
   &rStfJob = CreateRecord(Record.CCS_EE_JOB_STF);
   
   SQLExec("SELECT A.* FROM  PS_CCS_EE_JOB_STF A INNER JOIN PS_CCS_STF_POSN_ID B ON A.CCS_STF_POS_ID = B.CCS_STF_POS_ID  WHERE B.POSITION_NBR = :1 AND A.CCS_TRANSACT_NBR = :2 AND EMPLID = :3 ", &sPosNbr, &nTranNbr, &sEmplid, &rStfJob);
   /*Populate the CCS_EE_JOB_STF keys*/
   
   If &rStfJob.EMPLID.Value <> "" Then
      /*Check that the new value for the approval stat is different 
			than what's already in the DB*/
      &bRecSaved = True;
      
      If &rStfJob.CCS_STA_APPROVAL.Value <> &sApprovalStat Then
         &rStfJob.CCS_STA_APPROVAL.Value = &sApprovalStat;
         &rStfJob.Update();
         CommitWork();
      End-If;
   End-If;
   
   Return &rStfJob;
end-method;

